// CACHE ID 9f6c1ed4-f975-4fb5-9fcf-7994f9fda617-no-provenance
import(sys)
import(scheduler)
import(swift)
importStdlib(1)

types(
	xs:schema(
    			xs:simpleType("file", xs:restriction("string"))
    )
)
swift.field.const.float := swift:field("const", "float")
swift.field.const.int := swift:field("const", "int")
swift.field.temp.int := swift:field("temp", "int")
swift.field.const.string := swift:field("const", "string")
swift.field.hello.file := swift:field("hello", "file")
swift.field.const.boolean := swift:field("const", "boolean")
swift.string.17000 := swift:new(swift.field.const.string, value="hi")
hello := 
			swift:new(swift.field.hello.file, _defline=3
				swift:mapping("SingleFileMapper", swift:parameter("file", "hello.txt") )
			)

echo := function(o, s) {
	swift:unitStart("PROCEDURE", name="echo", line=5, outputs="o")
	k:tailcall(
	  swift:execute(
		"echo"
		swift:stageOut(o)

		swift:arguments(
			s
		)

		stdout = swiftscript:filename(#_line=7
			o
		)

		swift:deleteVars(s)
	  )
	)
	swift:unitEnd("PROCEDURE", name="echo", line=5)}

restartLog(name = k:concat(contextAttribute("SWIFT:SCRIPT_NAME"), "-", contextAttribute("SWIFT:RUN_ID"))) {
	swift:mains(
		swift:startProgressTicker()
		echo(#_line=10
			k:getAndDelete(hello)
			swift.string.17000
		)
		swift:stopProgressTicker()
	)
}

swift:cleanDataset(hello)
swift:cleanDataset(shutdown=true)